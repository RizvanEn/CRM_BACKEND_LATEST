(()=>{"use strict";var e={n:s=>{var t=s&&s.__esModule?()=>s.default:()=>s;return e.d(t,{a:t}),t},d:(s,t)=>{for(var a in t)e.o(t,a)&&!e.o(s,a)&&Object.defineProperty(s,a,{enumerable:!0,get:t[a]})},o:(e,s)=>Object.prototype.hasOwnProperty.call(e,s)};const s=require("express");var t=e.n(s);const a=require("mongoose");var r=e.n(a);const n=require("dotenv");var o=e.n(n);o().config();const i=process.env.PORT||8e3,d=r().Schema({name:{type:String,required:!0},email:{type:String,required:!0,unique:!0},password:{type:String,required:!0},user_role:{type:String,required:!0},isActive:{type:Boolean,default:!1},resetPasswordToken:{type:String},resetPasswordExpires:{type:Date}},{timestamps:!1,versionKey:!1}),u=r().model("user",d),c=r().Schema({user_id:{type:String,required:!0},bdm:{type:String,required:!0},branch_name:{type:String,required:!0},company_name:{type:String},contact_person:{type:String,required:!0},email:{type:String,required:!0},contact_no:{type:Number,required:!0},services:{type:[String],required:!0},closed_by:{type:String},total_amount:{type:Number,required:!0},term_1:{type:Number},term_2:{type:Number},term_3:{type:Number},term_1_payment_date:{type:String},term_2_payment_date:{type:String},term_3_payment_date:{type:String},pan:{type:String},gst:{type:String},remark:{type:String},date:{type:Date,required:!0},after_disbursement:{type:String},bank:{type:String},status:{type:String}},{versionKey:!1,timestamps:!0}),m=r().model("booking",c),g=require("crypto");var l=e.n(g);const p=require("nodemailer");var y=e.n(p);const f=require("bcrypt");var h=e.n(f);const v=require("jsonwebtoken");var w=e.n(v);const _=async(e,s,t)=>{try{const a=e.headers.authorization;if(!a)return s.status(401).send({message:"Authentication required"});const r=w().verify(a,process.env.JWT_SECRET);e.user=r,t()}catch(e){return s.status(401).send({message:"Invalid or expired token"})}},b=(e,s,t)=>{if("dev"!==e.user?.user_role)return s.status(403).send({message:"Access denied. Only devs can access this route."});t()};o().config();const k=t().Router();k.post("/adduser",_,b,(async(e,s)=>{try{const{name:t,email:a,password:r,user_role:n}=e.body;if(!t||!a||!r)return s.status(400).send({message:"send all required fields: name, email, password"});const o=a.toLowerCase();if(await u.findOne({email:o}))return s.status(409).send({message:"Email is already registered"});const i={name:t,email:o,password:await h().hash(r,5),user_role:n},d=await u.create(i);return s.status(201).send(d)}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.patch("/edituser/:id",_,b,(async(e,s)=>{try{const{id:t}=e.params,a=e.body;if(!a||0===Object.keys(a).length)return s.status(400).send({message:"No fields provided for update"});if(a.email&&(a.email=a.email.toLowerCase(),await u.findOne({email:a.email,_id:{$ne:t}})))return s.status(409).send({message:"Email is already registered"});a.password&&(a.password=await h().hash(a.password,5));const r=await u.findByIdAndUpdate(t,{$set:a},{new:!0,runValidators:!0});return r?s.status(200).send({message:"User updated successfully",user:r}):s.status(404).send({message:"User not found"})}catch(e){return console.error(e.message),s.status(500).send({message:e.message})}})),k.delete("/deleteuser/:id",_,b,(async(e,s)=>{try{const{id:t}=e.params;return await u.findById(t)?(await u.findByIdAndDelete(t),s.status(200).send({message:"User deleted successfully"})):s.status(404).send({message:"User not found"})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.get("/all",(async(e,s)=>{try{const e=await u.find({}).select("-password");if(0===e.length)return s.status(404).send({message:"No Users found"});e.length,s.status(200).send({Users:e})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.post("/login",(async(e,s)=>{try{const{email:t,password:a}=e.body;if(!t||!a)return s.status(400).send({message:"Please provide both email and password."});const r=await u.findOneAndUpdate({email:t},{isActive:!0});if(!r)return s.status(404).send({message:"User not found."});if(!await h().compare(a,r.password))return s.status(401).send({message:"Invalid email or password."});const n=(e=>w().sign({userId:e._id,user_role:e.user_role},process.env.JWT_SECRET,{expiresIn:"24h"}))(r);s.status(200).send({token:n,user:r})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.patch("/logout/:id",(async(e,s)=>{const{id:t}=e.params;try{const e=await u.findByIdAndUpdate(t,{isActive:!1});if(!e)return s.status(404).send({message:"User not found."});s.send(e)}catch(e){return s.status(500).send({message:e.message})}})),k.get("/bookings/:id",(async(e,s)=>{const t=e.params.id;try{if(!e.params.id)return s.status(400).send({message:"Not A VALID USER"});const a=await m.find({user_id:t});if(0===a.length)return s.status(404).send({message:"No bookings found for this user"});s.status(200).send(a)}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.get("/:id?",(async(e,s)=>{const t=e.params.id,a=e.query.pattern,r=e.query.userRole,n=e.query.userId;parseInt(a);try{let e;if(t){if(e=["dev","admin","senior admin"].includes(r)?await m.find({_id:t}):await m.find({_id:t,user_id:n}),0===e.length)return s.status(404).send({message:"No bookings found with this id"})}else{if(!a)return s.status(400).send({message:"Either id or pattern query parameter is required"});{const t={$or:[{company_name:{$regex:a,$options:"i"}},{contact_person:{$regex:a,$options:"i"}},{email:{$regex:a,$options:"i"}},{pan:{$regex:a,$options:"i"}},{gst:{$regex:a,$options:"i"}},{services:{$regex:a,$options:"i"}},{$expr:{$regexMatch:{input:{$toString:"$contact_no"},regex:a}}}]};if(e=["dev","admin","senior admin"].includes(r)?await m.find(t):await m.find({...t,user_id:n}),0===e.length)return s.status(404).send({message:"No bookings found matching the pattern"})}}s.status(200).send(e)}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.get("/:id",(async(e,s)=>{const t=e.params.id;try{if(!e.params.id)return s.status(400).send({message:"Not A VALID USER"});if(0===(await u.find({_id:t})).length)return s.status(404).send({message:"No User found with this id",status:!1});s.status(200).send({message:"VALID USER",status:!0})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.put("/password-reset",(async(e,s)=>{const{password:t,email:a}=e.body;if(!a||!t)return s.status(400).send({message:"Please provide both email and new password"});const r=a.toLowerCase();try{const e=await u.findOne({email:r});if(!e)return s.status(404).send({message:"User not found with this email"});const a=await h().hash(t,5);return e.password=a,await e.save(),s.status(200).send({message:"Password updated successfully"})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),k.post("/request-reset-password",(async(e,s)=>{const{email:t}=e.body;try{const e=await u.findOne({email:t});if(!e)return s.status(404).json({message:"User not found"});const a=l().randomBytes(20).toString("hex"),r=Date.now()+36e5;e.resetPasswordToken=a,e.resetPasswordExpires=r,await e.save();const n=`http://localhost:5353/user/reset-password/${a}`,o=y().createTransport({host:"smtp.hostinger.com",port:465,secure:!0,auth:{user:"siteadmin@enego.co.in",pass:"Siteadmin@enego@321"}}),i={to:e.email,from:"siteadmin@enego.co.in",subject:"Password Reset Request",text:`You are receiving this email because you (or someone else) have requested to reset the password for your account.\n\n\n      Please click the following link, or paste it into your browser to complete the process:\n\n\n      ${n}\n\n\n      If you did not request this, please ignore this email and your password will remain unchanged.`};await o.sendMail(i),s.status(200).json({message:"Password reset link sent to your email."})}catch(e){s.status(500).json({message:"Server error."})}})),k.post("/reset-password/:token",(async(e,s)=>{const{token:t}=e.params,{newPassword:a}=e.body;try{const e=await u.findOne({resetPasswordToken:t,resetPasswordExpires:{$gt:Date.now()}});if(!e)return s.status(400).json({message:"Invalid or expired token"});const r=await h().genSalt(5),n=await h().hash(a,r);e.password=n,e.resetPasswordToken=void 0,e.resetPasswordExpires=void 0,await e.save(),s.status(200).json({message:"Password reset successfully"})}catch(e){s.status(500).json({message:"Server error"})}}));const S=k,q=t().Router();q.post("/addbooking",(async(e,s)=>{const{user_id:t,bdm:a,branch_name:r,company_name:n,contact_person:o,email:i,contact_no:d,services:u,total_amount:c,term_1:g,term_2:l,term_3:p,term_1_payment_date:y,term_2_payment_date:f,term_3_payment_date:h,closed_by:v,pan:w,gst:_,remark:b,date:k,status:S,bank:q,funddisbursement:I}=e.body,N={branch_name:r,contact_person:o,user_id:t,bdm:a,email:i,services:u,total_amount:c,pan:w,date:k},$=Object.entries(N).filter((([e,s])=>!s||"services"===e&&(!Array.isArray(s)||0===s.length))).map((([e])=>e));if($.length>0)return s.status(400).send({message:`Missing required fields: ${$.join(", ")}`});try{const e={user_id:t,bdm:a,branch_name:r,company_name:n||"",contact_person:o,email:i,contact_no:d,closed_by:v,services:u,total_amount:c,term_1:g,term_2:l,term_3:p,term_1_payment_date:y,term_2_payment_date:f,term_3_payment_date:h,pan:w,gst:_||"N/A",remark:b,date:k||new Date,status:S,bank:q,after_disbursement:I},N=await m.create(e);return s.status(201).send({Message:"Booking Created Successfully",booking_id:N._id,booking:N})}catch(e){return console.log(e),s.status(500).send({message:e.message})}})),q.patch("/editbooking/:id",(async(e,s)=>{const{id:t}=e.params;let a=e.body;const r=e.headers["user-role"];if(!r)return s.status(400).send({message:"User role is required"});try{if(!await m.findById(t))return s.status(404).send("Booking not found");const e=["dev","senior admin"];if("admin"===r){const{services:e,...s}=a;a=s}if(e.includes(r)||"admin"===r){const e=await m.findByIdAndUpdate(t,a,{new:!0});return s.status(200).send({message:"Booking Updated Successfully",updatedBooking:e})}return s.status(403).send({message:"You do not have permission to edit this booking"})}catch(e){return s.status(500).send({message:e.message})}})),q.delete("/deletebooking/:id",(async(e,s)=>{const{id:t}=e.params;try{if(!await m.findByIdAndDelete(t))return s.status(404).send("Booking not found");s.status(200).send({message:"Booking Deleted Successfully"})}catch(e){s.status(500).send(e)}})),q.get("/bookings",(async(e,s)=>{const{startDate:t,endDate:a}=e.query,r=e.query.userId,n=e.query.userRole;try{const e={};if(t&&a){const r=new Date(t),n=new Date(a);if(isNaN(r)||isNaN(n))return s.status(400).send({message:"Invalid date format"});n.setHours(23,59,59,999),e.date={$gte:r,$lte:n}}if(!n||!["dev","admin","senior admin"].includes(n)){if(!r)return s.status(403).send({message:"Access forbidden. No valid role or user ID provided."});e.user_id=r}const o=await m.find(e);if(0===o.length)return s.status(404).send({message:"No Bookings Found"});s.status(200).send(o)}catch(e){console.error("Error fetching bookings:",e.message),s.status(500).send({message:e.message})}})),q.get("/all",(async(e,s)=>{const t=await m.find({});return 0!=t.length?s.status(200).send({message:"All Bookings Fetched Successfully",Allbookings:t}):s.status(404).send({message:"No Bookings To Show"})})),q.get("/bookings/status",(async(e,s)=>{const{status:t}=e.query,a=e.query.userId,r=e.query.userRole;try{if(!t||!["Pending","In Progress","Completed"].includes(t))return s.status(400).send({message:"Invalid or missing status parameter. Valid statuses are: Pending, In Progress, Completed."});let e;if(r&&["dev","admin","senior admin"].includes(r))e=await m.find({status:t});else{if(!a)return s.status(403).send({message:"Access forbidden. No valid role or user ID provided."});e=await m.find({user_id:a,status:t})}if(0===e.length)return s.status(404).send({message:"No Bookings Found for the given status"});s.status(200).send(e)}catch(e){console.error("Error fetching bookings by status:",e.message),s.status(500).send({message:e.message})}})),q.get("/bookings/services",(async(e,s)=>{const{service:t}=e.query,a=e.query.userId,r=e.query.userRole;try{if(!t)return s.status(400).send({message:"Missing service parameter."});if(!r||!["dev","admin","senior admin"].includes(r)){if(!a)return s.status(403).send({message:"Access forbidden. No valid role or user ID provided."});const e=await m.find({user_id:a,services:t});return 0===e.length?s.status(404).send({message:"No Bookings Found for the given user and service."}):s.status(200).send(e)}const e=await m.find({services:t});if(0===e.length)return s.status(404).send({message:"No Bookings Found for the given service."});s.status(200).send(e)}catch(e){console.error("Error fetching bookings by service:",e.message),s.status(500).send({message:e.message})}}));const I=q,N=r().Schema({name:{type:String,required:!0},value:{type:String,required:!0,unique:!0},status:{type:Boolean,required:!0}},{timestamps:!1,versionKey:!1}),$=r().model("service",N),A=t().Router();A.post("/api/services",(async(e,s)=>{const{name:t,value:a,status:r}=e.body;if(!t||!a||!r)return s.status(400).send("Invalid input data");const n={name:t,value:a,status:r};try{const e=await $.create(n);s.status(201).send({message:"Service added successfully",Service:e})}catch(e){s.status(500).send({message:"Error adding service",error:e.message})}})),A.patch("/api/services/:id",(async(e,s)=>{const{id:t}=e.params,a=e.body;if(!a||0===Object.keys(a).length)return s.status(400).send({message:"No fields provided for update"});try{const e=await $.findByIdAndUpdate(t,{$set:a},{new:!0,runValidators:!0});if(!e)return s.status(404).send({message:"Service not found"});s.status(200).send({message:"Service updated successfully",service:e})}catch(e){s.status(500).send({message:"Error updating service",error:e.message})}})),A.get("/api/services",(async(e,s)=>{try{const e=await $.find();if(!e||0===e.length)return s.status(404).send({message:"No services found"});s.status(200).send(e)}catch(e){console.error("Error fetching services:",e),s.status(500).send({message:"Error fetching services",error:e.message})}})),A.post("/api/bulk-insert-services",(async(e,s)=>{try{const e=servicesList.map((e=>({name:e.label,value:e.value,status:!e.disabled}))),t=await $.insertMany(e);s.status(201).send({message:"Services added successfully",result:t})}catch(e){console.error("Error inserting services:",e),s.status(500).send({message:"Error inserting services",error:e.message})}}));const E=A,P=require("cors");var B=e.n(P);const U=t()();U.use(t().json()),U.use(B()()),U.use(B()({origin:"*",methods:["GET","POST","PUT","DELETE","PATCH"],allowedHeaders:["Content-Type","Authorization","user-role"],credentials:!0})),U.use("/user",S),U.use("/booking",I),U.use("/services",E),U.get("/",((e,s)=>{s.send("<h1>server is running successfully</h1>")})),(async()=>{try{const e=await r().connect(process.env.Mongo_URL);console.log(`MongoDB Connected: ${e.connection.host}`)}catch(e){console.log({msg:"cannot connect to db",error:e.message}),process.exit(1)}})().then((()=>{console.log("connected"),U.listen(i,"0.0.0.0",(()=>{console.log(`Server is running at http://0.0.0.0:${i}`)}))})).catch((e=>{console.log(e)}))})();